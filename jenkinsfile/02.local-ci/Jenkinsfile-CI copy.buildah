pipeline {
  agent any

  environment {
    // === 사용자 수정 영역 ===
    GIT_URL                = 'https://github.com/himang10/myfirst-api-server.git'
    GIT_BRANCH             = 'master'            // 또는 main
    GIT_ID                 = 'skala-github-id'   // GitHub PAT credential ID
    IMAGE_NAME             = 'sk000-myfirst-api-server'
    // =======================
    IMAGE_TAG              = '1.0.0'
    IMAGE_REGISTRY_URL     = 'amdp-registry.skala-ai.com'
    IMAGE_REGISTRY_PROJECT = 'skala25a'

    DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'  // Harbor 인증 정보 ID
    K8S_NAMESPACE          = 'skala-practice'
  }

  options {
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage('Clone Repository') {
      steps {
        echo 'Clone Repository'
        git branch: "${GIT_BRANCH}", url: "${GIT_URL}", credentialsId: "${GIT_ID}"
      }
    }

    stage('Build with Maven') {
      steps {
        echo 'Build with Maven'
        sh 'mvn clean package -DskipTests'
      }
    }

    // 태그/이미지 경로 계산 (메타)
    stage('Compute Image Meta') {
      steps {
        script {
          def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
          env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
          env.IMAGE_REGISTRY  = "${env.IMAGE_REGISTRY_URL}/${env.IMAGE_REGISTRY_PROJECT}"
          env.REG_HOST        = env.IMAGE_REGISTRY_URL
          env.IMAGE_REF       = "${env.IMAGE_REGISTRY}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"

          echo "REG_HOST: ${env.REG_HOST}"
          echo "IMAGE_REF: ${env.IMAGE_REF}"
        }
      }
    }

    stage('Prepare Buildah Config') {
      steps {
        sh '''
set -eux
sudo mkdir -p /etc/containers
cat <<'CONF' | sudo tee /etc/containers/registries.conf > /dev/null
unqualified-search-registries = ["docker.io","quay.io","registry.fedoraproject.org"]
CONF
sudo cat /etc/containers/registries.conf
'''
      }
    }

    // 로그인/빌드/푸시/정리
    stage('Image Build & Push (Buildah)') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: "${DOCKER_CREDENTIAL_ID}",
          usernameVariable: 'REG_USER',
          passwordVariable: 'REG_PASS'
        )]) {
        sh '''
            set -eux
            # 1. 로그인
            echo "Login to $REG_HOST as $REG_USER"
            sudo buildah login -u "$REG_USER" -p "$REG_PASS" "$REG_HOST"

            # 2. 빌드
            sudo buildah bud --storage-driver=vfs -t "${IMAGE_REF}" .
            # 3. 푸시
            sudo buildah push --storage-driver=vfs "${IMAGE_REF}"
            # 4. 정리
            sudo buildah rmi -a || true
        '''
        }
      }
    }

    // k8s 리소스 파일(deploy.yaml) 수정
    stage('Update K8s Manifests') {
      steps {
        script {
          echo '=== Update deploy.yaml with new image tag ==='
        }
        sh '''
            set -eux
            test -f ./k8s/deploy.yaml

            echo "--- BEFORE ---"
            grep -n 'image:' ./k8s/deploy.yaml || true

            # IMAGE_REGISTRY/IMAGE_NAME 패턴의 태그를 FINAL_IMAGE_TAG 로 치환
            sed -Ei "s#(image:[[:space:]]*$IMAGE_REGISTRY/$IMAGE_NAME)[^[:space:]]+#\\1:$FINAL_IMAGE_TAG#" ./k8s/deploy.yaml

            echo "--- AFTER ---"
            grep -n 'image:' ./k8s/deploy.yaml || true
        '''
      }
    }

    // deployment yaml의 Git 커밋/푸시
    stage('Git Commit & Push (gitops)') {
    environment {
      K8S_DEPLOY_PATH = "./k8s/deploy.yaml"
      GIT_BRANCH      = "gitops"
    }
    steps {
      script {
        def gitRepoPath = env.GIT_URL.replaceFirst(/^https?:\/\//, '')
        echo "gitRepoPath: ${gitRepoPath}"
      }

      sh '''
        set -eux
        git config --global --add safe.directory '*'
        git config --global user.name  "skala-gitops"
        git config --global user.email "skala@skala-ai.com"

        echo "=== 현재 로컬 상태 확인 ==="
        git status || true
        git branch || true

        # 원격 정보 갱신
        git fetch origin || true

        # 브랜치 체크아웃 (Tekton과 동일)
        git checkout -b ${GIT_BRANCH} 2>/dev/null || git checkout ${GIT_BRANCH} 2>/dev/null || true

        # 이미지 태그 치환 (백업 파일 생성 없이 임시 파일 → 원본 교체)
        tmp="${K8S_DEPLOY_PATH}.tmp"
        sed -E "s#(image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME})[^[:space:]]+#\\1:${FINAL_IMAGE_TAG}#" "${K8S_DEPLOY_PATH}" > "${tmp}"
        mv -f "${tmp}" "${K8S_DEPLOY_PATH}"

        echo "=== 변경된 파일 확인 ==="
        grep -nE "image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME}" "${K8S_DEPLOY_PATH}" || true

        # 스테이징 & 스테이징된 변경사항 출력
        git add ${K8S_DEPLOY_PATH} || true
        echo "=== 스테이징된 변경사항 확인 ==="
        git diff --cached || true
      '''

      withCredentials([usernamePassword(
        credentialsId: "${env.GIT_ID}",
        usernameVariable: 'GIT_PUSH_USER',
        passwordVariable: 'GIT_PUSH_PASSWORD'
      )]) {
        script {
          env.GIT_REPO_PATH = env.GIT_URL.replaceFirst(/^https?:\/\//, '')
          sh '''
            set -eux
            if ! git diff --cached --quiet; then
              git commit -m "[AUTO] Update deploy.yaml with image $FINAL_IMAGE_TAG"
            else
              echo "No changes detected, forcing update with timestamp"
              echo "# Updated at $(date)" >> ${K8S_DEPLOY_PATH}
              git add ${K8S_DEPLOY_PATH}
              git commit -m "[AUTO] Force update deploy.yaml with image $FINAL_IMAGE_TAG at $(date)"
            fi

            git remote set-url origin "https://$GIT_PUSH_USER:$GIT_PUSH_PASSWORD@$GIT_REPO_PATH"
            git push origin ${GIT_BRANCH} --force
            echo "Successfully force pushed to ${GIT_BRANCH}"
          '''
        }
      }
    }
  }
}

