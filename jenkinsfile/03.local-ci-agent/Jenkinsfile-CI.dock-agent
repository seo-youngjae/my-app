pipeline {
    agent any

    environment {
        GIT_URL               = 'https://github.com/himang10/myfirst-api-server.git'
        GIT_BRANCH             = 'master' // 또는 main
        GIT_ID                 = 'skala-github-id' // GitHub PAT credential ID
        GIT_USER_NAME           = 'himang10'        // GitHub 사용자 이름
        GIT_USER_EMAIL          = 'himang10@gmail.com'
        IMAGE_REGISTRY          = 'amdp-registry.skala-ai.com/skala25a'
        IMAGE_NAME               = 'sk000-myfirst-api-server'
        IMAGE_TAG                 = '1.0.0'
        DOCKER_CREDENTIAL_ID    = 'skala-image-registry-id'  // Harbor 인증 정보 ID
        K8S_NAMESPACE              = 'skala-practice'
    }

    options {
        disableConcurrentBuilds()   // 같은 Job 동시 실행 금지
        timestamps()                // 콘솔 로그에 타임스탬프 표시
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Clone Repository"
                git branch: "${GIT_BRANCH}",
                    url: "${GIT_URL}",
                    credentialsId: "${GIT_ID}"
            }
        }

        stage('Build with Maven') {
            steps {
                echo "Build with Maven"
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Docker Build & Push') {
            agent {
                docker {
                    image 'gcr.io/kaniko-project/executor:debug'
                    reuseNode true
                }
            }
            environment {
                DOCKER_CONFIG_DIR = '/kaniko/.docker'
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'skala-image-registry-id',
                    usernameVariable: 'REG_USER',
                    passwordVariable: 'REG_PASS'
                )]) {
                    script {
                        // 1) 이미지 태그 생성
                        def hashcode = sh(
                            script: "date +%s%N | sha256sum | cut -c1-12",
                            returnStdout: true
                        ).trim()
                        def FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                        echo "Final Image Tag: ${FINAL_IMAGE_TAG}"

                        // 2) Kaniko가 읽을 /kaniko/.docker/config.json을 '런타임 생성'
                        sh """
                            set -eux

                            # 레지스트리 호스트만 추출 (예: amdp-registry.skala-ai.com)
                            REG_HOST=\$(echo "${IMAGE_REGISTRY}" | cut -d'/' -f1)

                            mkdir -p ${DOCKER_CONFIG_DIR}

                            # username:password → base64 (GNU/BusyBox/맥 호환)
                            AUTH_B64=\$(printf "%s:%s" "\${REG_USER}" "\${REG_PASS}" | base64 | tr -d '\\n')

                            cat > ${DOCKER_CONFIG_DIR}/config.json <<JSON
{
  "auths": {
    "\${REG_HOST}": {
      "auth": "\${AUTH_B64}"
    }
  }
}
JSON

                            echo "==== /kaniko/.docker/config.json ===="
                            cat ${DOCKER_CONFIG_DIR}/config.json

                            # 3) Kaniko 실행 (도커 데몬 불필요)
                            /kaniko/executor \\
                              --dockerfile=Dockerfile \\
                              --context="\${WORKSPACE}" \\
                              --destination=${IMAGE_REGISTRY}/${IMAGE_NAME}:${FINAL_IMAGE_TAG} \\
                              --snapshotMode=redo \\
                              --single-snapshot \\
                              --reproducible \\
                              --force
                        """

                        // 4) 이후 단계에서 사용할 최종 태그 저장
                        env.FINAL_IMAGE_TAG = FINAL_IMAGE_TAG
                    }
                }
            }
        }

        stage('Update deploy.yaml and Git Push') {
            steps {
                script {
                    // 환경변수 값 확인
                    echo "=== Environment Variables Check ==="
                    echo "GIT_ID: ${env.GIT_ID}"
                    echo "FINAL_IMAGE_TAG: ${env.FINAL_IMAGE_TAG}"
                    echo "GIT_BRANCH: ${env.GIT_BRANCH}"
                    echo "GIT_URL: ${env.GIT_URL}"

                    def gitRepoPath = env.GIT_URL.replaceFirst(/^https?:\\/\\//, '')
                    echo "gitRepoPath: ${gitRepoPath}"

                    sh """
                        set -eux
                        #apk add --no-cache sed grep

                        echo "=== 현재 디렉토리와 파일 ==="
                        pwd
                        ls -la

                        if [ -f "./k8s/deploy.yaml" ]; then
                            echo "deploy.yaml found"
                            echo "=== 수정 전 deploy.yaml ==="
                            cat ./k8s/deploy.yaml
                        else
                            echo "ERROR: deploy.yaml not found"
                            find . -name "*.yaml" -o -name "*.yml" | head -10
                            exit 1
                        fi

                        sed -Ei "s#(image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME})[^[:space:]]+#\\1:${FINAL_IMAGE_TAG}#" ./k8s/deploy.yaml

                        echo "=== 수정 후 deploy.yaml ==="
                        cat ./k8s/deploy.yaml
                        grep -n 'image:' ./k8s/deploy.yaml

                        git config --global --add safe.directory '*'
                        git config --global user.name "$GIT_USER_NAME"
                        git config --global user.email "$GIT_USER_EMAIL"

                        git fetch origin || true
                        cp ./k8s/deploy.yaml ./k8s/deploy.yaml.backup

                        if git show-ref --verify --quiet refs/heads/gitops || git show-ref --verify --quiet refs/remotes/origin/gitops; then
                            git checkout -f gitops || git checkout -B gitops origin/gitops
                        else
                            git checkout -b gitops
                        fi

                        cp ./k8s/deploy.yaml.backup ./k8s/deploy.yaml

                        git branch
                        git status

                        sed -Ei "s#(image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME})[^[:space:]]+#\\1:${FINAL_IMAGE_TAG}#" ./k8s/deploy.yaml

                        cat ./k8s/deploy.yaml

                        rm -f ./k8s/deploy.yaml.backup

                        git add ./k8s/deploy.yaml || true
                        git status
                    """

                    withCredentials([usernamePassword(
                        credentialsId: "${env.GIT_ID}",
                        usernameVariable: 'GIT_PUSH_USER',
                        passwordVariable: 'GIT_PUSH_PASSWORD'
                    )]) {
                        sh """
                            set -eux

                            echo "=== Credentials 확인 ==="
                            echo "GIT_PUSH_USER: \${GIT_PUSH_USER}"
                            echo "Password length: \${#GIT_PUSH_PASSWORD}"
                            echo "gitRepoPath: ${gitRepoPath}"

                            if ! git diff --cached --quiet; then
                                git commit -m "[AUTO] Update deploy.yaml with image ${env.FINAL_IMAGE_TAG}"
                                git remote set-url origin https://\${GIT_PUSH_USER}:\${GIT_PUSH_PASSWORD}@${gitRepoPath}
                                git push origin gitops --force
                                echo "=== Push to gitops branch completed successfully ==="
                            else
                                echo "=== No changes to commit ==="
                            fi
                        """
                    }
                }
            }
        }
    }
}

